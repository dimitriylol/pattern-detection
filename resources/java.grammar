compilationUnit : <ws> packageDecl? <ws> importDecl* (<ws> declWithBraces <ws>)* ;

(* .................................................. *)
(* DECL LEVEL *)
(* .................................................. *)

packageDecl : <'package'> <ws> qid <ws> <';'> ;

importDecl : <'import'> <ws> <'static'?> <ws> qid <ws> ('.' '*')? <ws> <';'> ;

declWithBraces : 
        classDecl
    |   interfaceDecl
    |   methodDecl
    ;

declBody : 
       (<ws> declWithBraces <ws>)*
    |   <ws>
    ;

(* METHOD *)

methodDecl : mods <ws> type <ws> id <ws> formalParams <ws> '{' declBody '}' ;

formalParams : '(' declPair* (<ws> ',' <ws> declPair)* ')' ;        

declPair : type <ws> id ;

(* CLASS *)

classDecl : mods <ws> <'class'> <ws> id <ws> extends? implements? <'{'> declBody <'}'> ; 

(* INTERFACE *)

interfaceDecl : mods <ws> <'interface'> <ws> id <ws> extends? <'{'> declBody <'}'> ;

extends: <'extends'> <ws> qid <ws> (',' <ws> qid <ws>)* ;

implements: <'implements'> <ws> qid <ws> (',' <ws> qid <ws>)* ;

(* .................................................. *)
(* SMTH *)
(* .................................................. *)

smthNotBraces : #'[^{}]*' ;

mandSmthNotBraces : #'[^{}]+' ;

(* .................................................. *)
(* HELPER *)
(* .................................................. *)

(* TYPE *)
type : qid ;

(* MODIFIER *)

mods : (mod <mandatoryWS>)* ;

mod :
        'public'     
    |   'protected'  
    |   'private'    
    |   'static'     
    |   'abstract'   
    |   'final'      
    |   'strictfp'             
    ;

(* IDENTIFIERS *)

qid : #'[a-zA-Z0-9_.]+' ;

id : #'[a-zA-Z0-9_]+' ;

(* .................................................. *)
(* WS *)
(* .................................................. *)

<ws>: <#'\s*'> ;

<mandatoryWS>: <#'\s+'> ;
