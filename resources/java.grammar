compilationUnit : <ws> packageDecl? <ws> importDecl* (<ws> declWithBraces <ws>)* ;

(* .................................................. *)
(* DECLARATIONS *)
(* .................................................. *)

packageDecl : <'package'> <ws> qid <ws> <';'> ;

importDecl : <'import'> <ws> <'static'?> <ws> importId <ws> <';'> ;

importId : qid ('.*')? ;       

declWithBraces : 
        classDecl
    |   interfaceDecl
    |   methodDecl
    ;

declBody : (<ws> inDeclBody <ws>)* ;

inDeclBody :
        declWithBraces 
    |   attrDecl
    |   <ws> &'}' <ws>
    ;        

(* CLASS *)

classDecl : mods <ws> <'class'> <ws> id <ws> extends implements <'{'> declBody <'}'> ;

(* INTERFACE *)

interfaceDecl : mods <ws> <'interface'> <ws> id <ws> extends <'{'> declBody <'}'> ;

extends:
        <'extends'> <ws> qid <ws> (<','> <ws> qid <ws>)*
    |   <ws>
    ;

implements:
        <'implements'> <ws> qid <ws> (<','> <ws> qid <ws>)*
    |   <ws>;

(* METHOD *)

methodDecl : mods <ws> type? <ws> id <ws> formalParams <ws> (<'{'> methodBody <'}'> | ';') ;

methodBody : (<ws> inMethodBody <ws>)* ;

inMethodBody :
        declWithBraces
    |   stmt
    |   <ws>
    ;

formalParams : <'('> declPair* (<ws> <','> <ws> declPair)* <')'> ;

(* STMT *)

stmt :
        localVar
    |   return
    |   expr <ws> ';'
    ;

return : <'return'> <ws> expr <';'>;

notInteresting : smthNotBraces <';'> ;

(* ATTRIBUTE *)

attrDecl : mods <ws> declVar <ws> ';' ;

(* LOCAL VARIABLE *)

localVar : declVar <ws> ';' ;

(* EXPRESSION *)

expr :
        operation
    |   narrowing
    |   primitiveVal
    |   qid
    |   call
    |   newOperator
    |   '(' expr ')'
    ;

call : qid <ws> '(' severalExpr ')' ; 

severalExpr : (<ws> expr <ws> (',' | '') <ws>)* ;

newOperator : <ws> <'new'> <ws> type <ws> ( '(' severalExpr ')' )? (<'{'> severalExpr | declBody <'}'>)? ;

operation :
        unaryOperator <ws> expr <ws>
    |   <ws> expr <ws> unaryOperator <ws>
    |   <ws> expr <ws> binaryOperator <ws> expr <ws>
    |   assignment 
    ;

assignment : <ws> qid <ws> assignmentOperator <ws> expr <ws> ;  

assignmentOperator: '=' ;

binaryOperator :
        '+' | '-' | '*' | '/' | '%'  
    |   '==' | '<=' | '>=' | '<' | '>' | '!='
    |   '&' | '|' | '^' |  '<<' | '>>' | '>>>'
    |   '&&' | '||' 
    ;

unaryOperator : '~' | '!' | '++' | '--' ;

narrowing : '(' type ')' expr ;

(* .................................................. *)
(* SMTH *)
(* .................................................. *)

smthNotBraces : #'[^{}]*' ;

mandSmthNotBraces : #'[^{}]+' ;
(* .................................................. *)
(* HELPER *)
(* .................................................. *)

declVar : type <ws> id <ws> initVar? <ws> (',' <ws> id <ws> initVar? <ws>)* initVar? ;

declPair : type <ws> id ;

initVar: '=' <ws> expr <ws> ;

primitiveVal :
        #'[a-zA-Z0-9.]*'
    |   #'".*"'
    |   #'\'.*\''
    ;

(* TYPE *)
type : primitiveType / qid ;

primitiveType:
        'boolean'
    |   'char'
    |   'byte'
    |   'short'
    |   'int'
    |   'long'
    |   'float'
    |   'double'
    ;

(* MODIFIER *)

mods : (mod <mandatoryWS>)* ;

mod :
        'public'     
    |   'protected'  
    |   'private'    
    |   'static'     
    |   'abstract'   
    |   'final'      
    |   'strictfp'
    |   'default'
    ;

(* IDENTIFIERS *)

qid : !(mod <mandatoryWS>) #'[a-zA-Z0-9_.]+' ;

id : !(mod <mandatoryWS>) #'[a-zA-Z0-9_]+' ;

(* WS *)
    
<ws>: <#'\s*'> ;

<mandatoryWS>: <#'\s+'> ;
