compilationUnit : <ws> packageDecl? <ws> importDecl* (<ws> declWithBraces <ws>)* ;

(* .................................................. *)
(* DECL LEVEL *)
(* .................................................. *)

packageDecl : 'package' qid ';' ;

importDecl : 'import' 'static'? qid ('.' '*')? ';' ;

declWithBraces : 
        classDecl
    |   interfaceDecl
    |   methodDecl
    ;

declBody :
       (<ws> declWithBraces <ws>)*
    |   <ws>
    ;

(* METHOD *)

methodDecl : mods <ws> id <ws> id <ws> formalParams <ws> '{' declBody '}' ;

formalParams : '(' declPair* (<ws> ',' <ws> declPair)* ')' ;        

declPair : id <ws> id ;

(* CLASS *)

classDecl : mods <ws> 'class' <ws> id <ws> extends? implements? '{' declBody '}' ; 

(* INTERFACE *)

interfaceDecl : mods <ws> 'interface' <ws> id <ws> extends? '{' declBody '}' ;

extends: 'extends' <ws> id <ws> (',' <ws> id <ws>)* ;

implements: 'implements' <ws> id <ws> (',' <ws> id <ws>)* ;

(* .................................................. *)
(* SMTH *)
(* .................................................. *)

smthNotBraces : #'[^{}]*' ;

mandSmthNotBraces : #'[^{}]+' ;

(* .................................................. *)
(* HELPER *)
(* .................................................. *)

(* MODIFIER *)

mods : (mod <mandatoryWS>)* ;

mod :
        'public'     
    |   'protected'  
    |   'private'    
    |   'static'     
    |   'abstract'   
    |   'final'      
    |   'strictfp'             
    ;

(* IDENTIFIERS *)

qid : id ('.' id)* ;

id : #'[a-zA-Z0-9_]+' ;

(* .................................................. *)
(* WS *)
(* .................................................. *)

<ws>: <#'\s*'> ;

<mandatoryWS>: <#'\s+'> ;
